(self.webpackChunksignatory=self.webpackChunksignatory||[]).push([[881],{936:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var i=n(2122),a=n(9756),s=(n(7294),n(3905)),o=["components"],r={id:"yubihsm",title:"YubiHSM"},l={unversionedId:"yubihsm",id:"yubihsm",isDocsHomePage:!1,title:"What is YubiHSM2?",description:"Taken from the Yubico website",source:"@site/../docs/yubihsm.md",sourceDirName:".",slug:"/yubihsm",permalink:"/docs/yubihsm",editUrl:"https://github.com/ecadlabs/signatory/edit/master/website/../docs/yubihsm.md",version:"current",frontMatter:{id:"yubihsm",title:"YubiHSM"},sidebar:"someSidebar",previous:{title:"File-Based Secret Storage (Insecure)",permalink:"/docs/filebased"},next:{title:"Azure KMS",permalink:"/docs/azure_kms"}},u=[{value:"Setup with Signatory",id:"setup-with-signatory",children:[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Installing and using the YubiHSM Connector and Shell",id:"installing-and-using-the-yubihsm-connector-and-shell",children:[]},{value:"Connecting to the YubiHSM2 device with yubihsm-shell",id:"connecting-to-the-yubihsm2-device-with-yubihsm-shell",children:[]},{value:"Importing a Secret key into the YubiHSM2 for Tezos",id:"importing-a-secret-key-into-the-yubihsm2-for-tezos",children:[]},{value:"Listing Tezos Addresses in the YubiHSM2",id:"listing-tezos-addresses-in-the-yubihsm2",children:[]},{value:"Configuring your newly imported address",id:"configuring-your-newly-imported-address",children:[]}]}],d={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Taken from the ",(0,s.kt)("a",{parentName:"em",href:"https://www.yubico.com/products/hardware-security-module/"},"Yubico website"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"The YubiHSM 2 is a Hardware Security Module that is within reach of all organizations. It provides advanced cryptography, including hashing, asymmetric and symmetric key cryptography, to protect the cryptographic keys that secure critical applications, identities, and sensitive data in an enterprise for certificate authorities, databases, code signing and more.")),(0,s.kt)("p",null,"YubiHSM2 is a hardware-based HSM device. This device is suitable for use where you have access to your physical servers."),(0,s.kt)("h2",{id:"setup-with-signatory"},"Setup with Signatory"),(0,s.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("p",null,"In this guide, we make use of Docker for convenience, but you are not required to use Docker."),(0,s.kt)("p",null,"This documentation assumes that you will be running signatory and the YubiHSM2 device on the same physical server."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A Linux system operably configured with:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Docker"),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("a",{parentName:"li",href:"https://developers.yubico.com/YubiHSM2/Releases/"},"yubihsm2 sdk")," version 2012.12 or later installed. This documentation assumes you are using Docker on Debian."))),(0,s.kt)("li",{parentName:"ul"},"A YubiHSM device connected to your server. (See the output of ",(0,s.kt)("inlineCode",{parentName:"li"},"lsusb")," to verify)")),(0,s.kt)("h3",{id:"installing-and-using-the-yubihsm-connector-and-shell"},"Installing and using the YubiHSM Connector and Shell"),(0,s.kt)("p",null,"Signatory uses the ",(0,s.kt)("inlineCode",{parentName:"p"},"yubihsm-connector")," daemon to interact with the YubiHSM USB device."),(0,s.kt)("p",null,"The connector requires you to have the libusd package installed on your system."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"apt-get install libusb-1.0-0\n")),(0,s.kt)("p",null,"To install the connector from the, find and install the "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"dpkg -i yubihsm-connector_2.1.0-1_amd64.deb\n")),(0,s.kt)("p",null,"To manage the YubiHSM2 device, you will need the ",(0,s.kt)("inlineCode",{parentName:"p"},"yubihsm-shell")," utility. This utility requires the installation of the ",(0,s.kt)("inlineCode",{parentName:"p"},"libedit2")," package."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"apt-get install libedit2\n")),(0,s.kt)("p",null,"To install yubihsm-shell, you must install the yubihsm-shell package and the supporting YubiHSM2 libraries. The ",(0,s.kt)("inlineCode",{parentName:"p"},"yubihsm-shell")," is not required for the operation of signatory and is only for the management of the YubiHSM2 device."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"dpkg -i yubihsm-shell_2.0.2-1_amd64.deb \\\n    libyubihsm1_2.0.2-1_amd64.deb \\\n    libyubihsm-http1_2.0.2-1_amd64.deb \\\n    libyubihsm-usb1_2.0.2-1_amd64.deb\n")),(0,s.kt)("h3",{id:"connecting-to-the-yubihsm2-device-with-yubihsm-shell"},"Connecting to the YubiHSM2 device with yubihsm-shell"),(0,s.kt)("p",null,"Start the ",(0,s.kt)("inlineCode",{parentName:"p"},"yubihsm-connector")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yubihsm-connector\n")),(0,s.kt)("p",null,"Run the command ",(0,s.kt)("inlineCode",{parentName:"p"},"yubihsm-shell"),". You will get a prompt that looks like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yubihsm>\n")),(0,s.kt)("p",null,"To connect to the device type ",(0,s.kt)("inlineCode",{parentName:"p"},"connect"),". It will automatically connect to localhost."),(0,s.kt)("p",null,'To open a new session with the device type. The default password on the YubiHSM2 is "password".'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yubihsm> session open 1 password\n")),(0,s.kt)("p",null,"To list all objects on the device run the command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yubihsm> list objects 0 0\n")),(0,s.kt)("h3",{id:"importing-a-secret-key-into-the-yubihsm2-for-tezos"},"Importing a Secret key into the YubiHSM2 for Tezos"),(0,s.kt)("p",null,"To import a secret key, we will use the ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory-cli")," command."),(0,s.kt)("p",null,'Here are six examples of private keys for test/evaluation purposes. Three encrypted (password is "test") and three unencrypted.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[ { "name": "ed25519_encrypted",\n    "value":\n      "encrypted:edesk1GXwWmGjXiLHBKxGBxwmNvG21vKBh6FBxc4CyJ8adQQE2avP5vBB57ZUZ93Anm7i4k8RmsHaPzVAvpnHkFF" },\n  { "name": "secp256k1_encrypted",\n    "value":\n      "encrypted:spesk24UQkAiJk8X6AufNtRv1WWPp2BAssEgmijCTQPMgUXweSKPmLdbyAjPmCG1pR2dC9P5UZZVeZcb7zVodUHZ" },\n  { "name": "p256_encrypted",\n    "value":\n      "encrypted:p2esk28hoUE2J88QNFj2aDX2pjzL7wcVh2g8tkEwtWWguby9M3FHUgSbzvF2Sd7wQ4Kd8crFwvto6gF3otcBuo4T" },\n  { "name": "p256_unencrypted",\n    "value":\n      "unencrypted:p2sk3HdQc93EjixRAWs9WZ6b3spNgPD7VriXU8FH8EiHN8sxCh7gmv" },\n  { "name": "secp256k1_unencrypted",\n    "value":\n      "unencrypted:spsk2Fiz7sGP5fNMJrokp6ynTa4bcFbsRhw58FHXbNf5ProDNFJ5Xq" },\n  { "name": "ed25516_unencrypted",\n    "value":\n      "unencrypted:edsk2rKA8YEExg9Zo2qNPiQnnYheF1DhqjLVmfKdxiFfu5GyGRZRnb" } ]\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory-cli")," command needs a configuration file. The following will suffice;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"server:\n  address: localhost:6732\n  utility_address: localhost:9583\n\nvaults:\n  # Name is used to identify backend during import process\n  yubi:\n    driver: yubihsm\n    config:\n      address: localhost:12345 # Address for the yubihsm-connector\n      password: password\n      auth_key_id: 1\n")),(0,s.kt)("p",null,'To import a secret key, we take the secret key from the above json examples. Do not include the "encrypted:" or "unencrypted:" prefix.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"signatory-cli import --config ./signatory.yaml --vault yubi edsk2rKA8YEExg9Zo2qNPiQnnYheF1DhqjLVmfKdxiFfu5GyGRZRnb \n")),(0,s.kt)("p",null,"If the import is successful, the ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory-cli")," will report the PKH of your newly imported secret:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'INFO[0000] Initializing vault                            vault=yubihsm vault_name=yubi\nINFO[0000] Requesting import operation                   pkh=tz1SBhzLDp9Jvg98ztMZMstaKbAENmzRd4Y7 vault=YubiHSM vault_name="localhost:12345/1"\nINFO[0000] Successfully imported                         key_id=0cf8 pkh=tz1SBhzLDp9Jvg98ztMZMstaKbAENmzRd4Y7 vault=YubiHSM vault_name="localhost:12345/1"\n')),(0,s.kt)("p",null,"If you import an encrypted key, the ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory-cli")," command will prompt you for a password."),(0,s.kt)("p",null,"You can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"yubihsm-shell")," utility command ",(0,s.kt)("inlineCode",{parentName:"p"},"list objects 0 0")," to verify that you can also see your newly imported secret within the YubiHSM2 device."),(0,s.kt)("h3",{id:"listing-tezos-addresses-in-the-yubihsm2"},"Listing Tezos Addresses in the YubiHSM2"),(0,s.kt)("p",null,"You can use the command ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory-cli list")," to list all keys in the YubiHSM2. ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory-cli")," also prints the configuration status for each address"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"signatory-cli -c ./signatory.yaml list\nPublic Key Hash:    tz1SBhzLDp9Jvg98ztMZMstaKbAENmzRd4Y7\nVault:              YubiHSM\nID:                 0cf8\nStatus:             Disabled\n")),(0,s.kt)("h3",{id:"configuring-your-newly-imported-address"},"Configuring your newly imported address"),(0,s.kt)("p",null,"Add the PKH for your new secret into the ",(0,s.kt)("inlineCode",{parentName:"p"},"tezos:")," block of your ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory.yaml")," file as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"server:\n  address: localhost:6732\n  utility_address: localhost:9583\n\nvaults:\n  # Name is used to identify backend during import process\n  yubi:\n    driver: yubihsm\n    config:\n      address: localhost:12345 # Address for the yubihsm-connector\n      password: password\n      auth_key_id: 1\ntezos:\n  tz1SBhzLDp9Jvg98ztMZMstaKbAENmzRd4Y7:\n    log_payloads: true\n    allowed_operations:\n      - generic\n    allowed_kinds:\n      - origination\n")),(0,s.kt)("p",null,"Rerun the ",(0,s.kt)("inlineCode",{parentName:"p"},"signatory-cli list")," command to verify that your new address is getting picked up, and is configured as you expect."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"signatory-cli -c ./signatory.yaml list\nPublic Key Hash:    tz1SBhzLDp9Jvg98ztMZMstaKbAENmzRd4Y7\nVault:              YubiHSM\nID:                 0cf8\nStatus:             Active\nAllowed Operations: [generic]\nAllowed Kinds:      [ballot]\n")))}p.isMDXComponent=!0}}]);