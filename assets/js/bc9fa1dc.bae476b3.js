(self.webpackChunksignatory=self.webpackChunksignatory||[]).push([[634],{1765:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=["components"],s={id:"filebased",title:"File-Based Secret Storage (Insecure)"},l={unversionedId:"filebased",id:"filebased",isDocsHomePage:!1,title:"File-Based Secret Storage (Insecure)",description:"For evaluation and prototyping purposes, Signatory file-based signer mode allows operation without an HSM or Key Vault service. By storing the secret key material in a JSON file, users can get Signatory up and running quickly for evaluation and development purposes.",source:"@site/../docs/localsecret.md",sourceDirName:".",slug:"/filebased",permalink:"/docs/filebased",editUrl:"https://github.com/ecadlabs/signatory/edit/master/website/../docs/localsecret.md",version:"current",frontMatter:{id:"filebased",title:"File-Based Secret Storage (Insecure)"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/docs/start"},next:{title:"What is YubiHSM2?",permalink:"/docs/yubihsm"}},u=[{value:"Signatory configuration for file-based secret storage",id:"signatory-configuration-for-file-based-secret-storage",children:[{value:"Running Signatory",id:"running-signatory",children:[]},{value:"Verify that signatory is working",id:"verify-that-signatory-is-working",children:[]}]}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"For evaluation and prototyping purposes, Signatory file-based signer mode allows operation without an HSM or Key Vault service. By storing the secret key material in a JSON file, users can get Signatory up and running quickly for evaluation and development purposes."),(0,o.kt)("h2",{id:"signatory-configuration-for-file-based-secret-storage"},"Signatory configuration for file-based secret storage"),(0,o.kt)("p",null,"The documentation assumes you will use the official Signatory docker image, and that you have a Linux server operably configured with docker installed."),(0,o.kt)("p",null,"Place the following YAML in a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"signatory.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'server:\n  # Address/Port that Signatory listens on\n  address: :6732\n  # Address/Port that Signatory serves prometheus metrics on\n  utility_address: :9583\n\nvaults:\n# Name of vault\n  local_file_keys:\n    driver: file\n    config:\n      file: /etc/secret.json\n\n# List enabled public keys hashes here\ntezos:\n  # Default policy allows "block" and "endorsement" operations\n  tz1Wk1Wdczh5BzyZ1uz2DW9xdFg9B5cFuGFm:\n    log_payloads: true\n    allowed_operations:\n    # List of [generic, block, endorsement]\n    - generic\n    - block\n    - endorsement\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tz1Wk1Wdczh5BzyZ1uz2DW9xdFg9B5cFuGFm")," key corresponds to the secret key that you will put in ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/secret.json")),(0,o.kt)("p",null,"Contents of ",(0,o.kt)("inlineCode",{parentName:"p"},"secret.json")," is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[ { "name": "your_secret_key",\n    "value":\n      "unencrypted:edsk3DYwZpPmbNTRSdJW2wBeHoneNqjPt9Xj49Fnhcir6q47JpD5Vz" } ]\n')),(0,o.kt)("h3",{id:"running-signatory"},"Running Signatory"),(0,o.kt)("p",null,"Next, you want to run the signatory docker image as follows:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Remember to secure the network where Signatory is running")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'docker run -it --rm \\\n    -v "$(realpath signatory.yaml):/etc/signatory.yaml" \\\n    -v "$(realpath secret.json):/etc/secret.json" \\\n    -p 6732:6732 \\\n    -p 9583:9583 \\\n    ecadlabs/signatory:latest serve -c /etc/signatory.yaml\n')),(0,o.kt)("h3",{id:"verify-that-signatory-is-working"},"Verify that signatory is working"),(0,o.kt)("p",null,"You can test that signatory is working, making a GET request using the Public Key Hash (PKH). Signatory will return a JSON payload containing the public key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl signatory:6732/keys/tz1Wk1Wdczh5BzyZ1uz2DW9xdFg9B5cFuGFm\n")),(0,o.kt)("p",null,"A response such as the following should be expected:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"public_key":"edpktn6UGrMQUjhWQJ5kY4qWoCp1sDZWkK5ugizTc5jHSifG1j3r8o"}\n')),(0,o.kt)("p",null,"You can test the signing functionality by making a POST request as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl -XPOST \\\n    -d '\"02111111111111111110\"' \\\n    signatory:6732/keys/tz1Wk1Wdczh5BzyZ1uz2DW9xdFg9B5cFuGFm\n")),(0,o.kt)("p",null,"Which should return an HTTP 200 OK with a payload similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"signature":"sigWetzF5zVM2qdYt8QToj7e5cNBm9neiPRc3rpePBDrr8N1brFbErv2YfXMSoSgemJ8AwZcLfmkBDg78bmUEzF1sf1YotnS"}\n')),(0,o.kt)("p",null,"If you repeat the same signing operation more than once, you will get an error from the High-Watermark feature. This is a safety measure to prevent injection of duplicate operations."),(0,o.kt)("p",null,"The payload on this request resembles a Tezos endorsement that would be emitted from a Tezos Baker node."))}d.isMDXComponent=!0}}]);